# Instalar <github>
# git version 2.16.2
# configurar para poder hacer los commits a github
# Descargar e instalar <VirtualBox>
# Descargar e instalar <Vagrant>
# Vagrant 2.2.18
# Instalar Atom
# Instalar ModHeader que es un add-in para Chrome

# Usar el espacio de trabajo (workspace o Courses en mi caso) en la PC
# Crear un directorio para el **proyecto** sin caracteres especiales ni espacios
# Adicionar el fólder del **proyecto** anterior <Add Project Folder> en Atom
# Crear el **proyecto** en Git
git init
# Reiniciar Atom para que adquiera el ícono de proyecto en Git
# Crear un README.md
# Generar un programa para ignorar parte del código de instalación .gitignore
# Hacer un archivo para la licencia LICENSE

## Se necesita crear una llave para sincronzir con github
ls ~/.ssh
ssh-keygen -t rsa -b 4096 -C "jaimevz@mac.com"
## Es recomendable crear una frase
## Genera la llave pública y privada

## Entrar al perfil de GitHub y adicionar la llave
## Ahora hay que generar un Token, poner el password y usarlo 

# Levantar una máquina virtual
vagrant up

# Conectarse a la máquina virtual
vagrant ssh

# En la máquina virtual cambiar a directorio de vagrant
vagrant@ubuntu-bionic:~$ cd /vagrant/

# Activar el ambiente virtual
vagrant@ubuntu-bionic:/vagrant$ source ~/env/bin/activate

# Abrir un proyecto nuevo <profiles_project> en el directorio actual (con el "punto" ".")
(env) vagrant@ubuntu-bionic:/vagrant$ django-admin.py startproject profiles_project .

# Crear una aplicación nueva <profiles_api> usando django con manage.py
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py startapp profiles_api

# Permitir una aplicación nueva en el proyecto profiles_project abrir el documento settings.py
# Es necesario permitir el rest_framework y rest_framework.authtoken si se van a usar.
# Aquí se autoriza el programa profile_api
## settings.py
INSTALLED_APPS = [
    ...,
    'rest_framework',
    'rest_framework.authtoken',
    'profiles_api',
]
# Django viene con un servidor de desarrollo para hacer pruebas
# Se accede de ésta manera
(env) vagrant@ubuntu-bionic:/vagrant$ python manage.py runserver 0.0.0.0:8000

# La máquina virtual fué configurada para que el uso del puerto 8000


Create a Project and API
